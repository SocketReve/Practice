/*! farmacia Grunt 22-10-2014 */
angular.module("PracticeSimulator").factory("Graph2",function($q,$timeout,$window,$sanitize){function camelCase(input){return input.replace(/ (.)/g,function(match,group1){return group1.toUpperCase()})}var g,renderer,zoom,svg,layout,model,scale=.9,edgesCount=1,Graph=function(nodes,edges){angular.element(document).ready(function(){svg=d3.select("svg"),centerG=svg.append("g"),zoomG=centerG.append("g"),zoom=dagreD3.zoom.panAndZoom(d3.select("svg g g")),renderer=new dagreD3.Renderer,dagreD3.zoom(svg,zoom),layout=dagreD3.layout().nodeSep(70).rankSep(120).rankDir("LR"),g=new dagreD3.Digraph({multigraph:!0});for(var i=0;i<nodes.length;i++){var htmlTemplate="<div class='customNode'>";htmlTemplate+="<span class='type "+$sanitize(nodes[i].type)+"'> </span>",htmlTemplate+="<span class='name'>"+camelCase($sanitize(nodes[i].id))+"</span>",htmlTemplate+="<span class='description'>"+$sanitize(nodes[i].descr)+"</span>",htmlTemplate+="<span class='provider'> "+$sanitize(nodes[i].provider.toUpperCase())+"</span>",htmlTemplate+="<span class='mem'>"+$sanitize(nodes[i].mem)+("COMP"==nodes[i].type?" | "+$sanitize(nodes[i].func):"")+"</span>",htmlTemplate+="<span class='risk'>"+$sanitize(nodes[i].risk)+"</span>",htmlTemplate+="</div>",g.addNode(camelCase(nodes[i].id.trim()),{labelType:"html",label:htmlTemplate,descr:nodes[i].descr,type:nodes[i].type,provider:nodes[i].provider.toUpperCase(),mem:parseInt(nodes[i].mem),risk:parseFloat(nodes[i].risk)})}for(var i=0;i<edges.length;i++)g.addEdge(edgesCount,edges[i].u,edges[i].v,{label:edgesCount.toString()}),edgesCount++;renderer.layout(layout),model=renderer.run(g,d3.select("svg g g")),Graph.resize()}),angular.element($window).bind("resize",function(){Graph.resize()})};return Graph.resize=function(){var graphWidth=model.graph().width+5,graphHeight=model.graph().height+5,width=parseInt(svg.style("width").replace(/px/,"")),height=parseInt(svg.style("height").replace(/px/,"")),zoomScale=Math.min(width/graphWidth*scale,height/graphHeight*scale),translate=[width/2-graphWidth*zoomScale/2+10,height/2-graphHeight*zoomScale/2];zoom.translate(translate),zoom.scale(zoomScale),zoom.event(svg.transition().duration(500))},Graph.addNode=function(id,description,type,provider,mem,risk,func){try{var htmlTemplate="<div class='customNode'>";htmlTemplate+="<span class='type "+$sanitize(type)+"'> </span>",htmlTemplate+="<span class='name'>"+camelCase($sanitize(id))+"</span>",htmlTemplate+="<span class='description'>"+$sanitize(description)+"</span>",htmlTemplate+="<span class='provider'>"+$sanitize(provider.toUpperCase())+"</span>",htmlTemplate+="<span class='mem'>"+$sanitize(mem)+("COMP"==type?" | "+$sanitize(func):"")+"</span>",htmlTemplate+="<span class='risk'>"+$sanitize(risk)+"</span>",htmlTemplate+="</div>",g.addNode(camelCase(id.trim()),{labelType:"html",label:htmlTemplate,descr:description,type:type,provider:provider.toUpperCase(),mem:parseInt(mem),risk:parseFloat(risk),func:func})}catch(err){throw"Node already in graph or input not valid"}this.redesign(),$timeout(function(){Graph.resize()},500)},Graph.addEdge=function(source,target){try{g.addEdge(edgesCount,camelCase(source),camelCase(target),{label:edgesCount.toString()}),edgesCount++}catch(err){throw"Edge is already in the graph or input not valid"}this.redesign(),$timeout(function(){Graph.resize()},500)},Graph.removeNode=function(id){try{g.delNode(id)}catch(err){throw"Node not exists or input not valid"}this.redesign(),$timeout(function(){Graph.resize()},500)},Graph.removeEdge=function(id){try{g.delEdge(id)}catch(err){throw"Communication not exists"}this.redesign(),$timeout(function(){Graph.resize()},500)},Graph.redesign=function(){renderer.transition(function(selection){return selection.transition().duration(500)}),model=renderer.run(g,d3.select("svg g g"))},Graph.getElementsJSON=function(){for(var object=dagreD3.json.encode(g),i=0;i<object.nodes.length;i++)delete object.nodes[i].value.label,delete object.nodes[i].value.labelType;return delete object.type,JSON.stringify(object)},Graph}),angular.module("PracticeSimulator").controller("NetworkSimulator",function($scope,$interval,$timeout,$http,Graph2){function checkBackendConnection(){$http.get("/ping").success(function(data){"pong"==data.status&&($scope.backendConnectionStyle="green",$scope.statoBackend="Backend Up")}).error(function(){$scope.backendConnectionStyle="",$scope.statoBackend="Backend Down"})}function customAlert(message){$scope.alert=!0,$scope.alertMessage=message,$timeout(function(){$scope.alert=!1,$scope.alertMessage=""},3e3)}$scope.nameNew="",$scope.descrizioneNew="",$scope.fromNew="",$scope.toNew="",$scope.memNew=0,$scope.riskNew=.1,$scope.groupOfNodeNew="",$scope.removeNodeName="",$scope.newGroupName="",$scope.newGroupDescription="",$scope.nodeTypeNew="IN",$scope.nodeTypeModifier="COMP",$scope.nodeIDModifier="",$scope.nodeDescriptionModifier="",$scope.nodeFromModifier="",$scope.nodeToModifier="",$scope.nodeGroupModifier="",$scope.simulationRunning=!1,$scope.statoBackend="Backend Down",$scope.alert=!1,checkBackendConnection();var nodes=[{id:"nodo1",descr:"nodo presso aruba networks - web server",type:"COMP",provider:"aruba",mem:"1",risk:"0.5",func:"SUM"},{id:"nodo2",descr:"nodo presso aws ec2 - load balancing",type:"COMP",provider:"AWS",mem:"1",risk:"0.6",func:"SUM"},{id:"nodo3",descr:"nodo privato",type:"RES",provider:"telecom",mem:"1",risk:"0.7"},{id:"nodo4",descr:"nodo privato",type:"IN",provider:"telecom",mem:"1",risk:"0.9"}],edges=[{u:"nodo4",v:"nodo1"},{u:"nodo1",v:"nodo2"},{u:"nodo3",v:"nodo1"},{u:"nodo1",v:"nodo3"},{u:"nodo2",v:"nodo1"}];Graph2(nodes,edges),$scope.addNode=function(){if(""!=$scope.nameNew.trim()&&""!=$scope.descrizioneNew.trim()&&""!=$scope.providerNodeNew.trim())try{Graph2.addNode($scope.nameNew.trim(),$scope.descrizioneNew.trim(),$scope.nodeTypeNew,$scope.providerNodeNew.trim(),$scope.memNew,$scope.riskNew,$scope.nodeFunctionNew),$scope.nameNew="",$scope.descrizioneNew="",$scope.providerNodeNew="",$scope.memNew=0,$scope.riskNew=.1}catch(err){customAlert(err)}else customAlert("Not compiled all input form")},$scope.addCommunication=function(){if(""!=$scope.fromNew.trim()&&""!=$scope.toNew.trim())try{Graph2.addEdge($scope.fromNew.trim(),$scope.toNew.trim()),$scope.fromNew="",$scope.toNew=""}catch(err){customAlert(err)}else customAlert("Not compiled all input form")},$scope.removeNode=function(){if(""!=$scope.removeNodeName.trim())try{Graph2.removeNode($scope.removeNodeName.trim()),$scope.removeNodeName=""}catch(err){customAlert(err)}else customAlert("Not compiled all input form")},$scope.removeEdge=function(){if(""!=$scope.removeComName.trim())try{Graph2.removeEdge($scope.removeComName.trim()),$scope.removeComName=""}catch(err){customAlert(err)}else customAlert("Not compiled all input form")},$scope.hideModifier=function(){angular.element(document.getElementById("modifier")).addClass("hide")},$scope.hideParameters=function(){angular.element(document.getElementById("parameters")).removeClass("slideRight")},$scope.showParameters=function(){angular.element(document.getElementById("parameters")).addClass("slideRight")},$scope.restartVisualizer=function(){Graph2.resize()},$scope.runSimulation=function(){$scope.simulationRunning=!0,$http.post("/uploadNetwork",Graph2.getElementsJSON()).success(function(data){$scope.simulationRunning=!1,console.log(data)}).error(function(){$scope.simulationRunning=!1})},$interval(function(){checkBackendConnection()},3e3)});